<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docs on Cindy&#39;s blog</title>
    <link>http://localhost:1313/docs/</link>
    <description>Recent content in Docs on Cindy&#39;s blog</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 14 Mar 2025 16:13:39 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>到底怎麼駭客整理自己的大腦?＿＿分享一個有趣的內容，ＲＴＴ？</title>
      <link>http://localhost:1313/docs/rtt/</link>
      <pubDate>Fri, 14 Mar 2025 16:13:39 +0800</pubDate>
      <guid>http://localhost:1313/docs/rtt/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;ＲＴＴ&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/%EF%BC%B2%EF%BC%B4%EF%BC%B4.png&#34;&gt;
到底怎麼駭客整理自己的大腦? 思考是不是有這樣的狀況?在休閒將心理學作為方法論研究，整理思考。&lt;br&gt;
分享一個我聽到的podcasts&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://podcasts.apple.com/tw/podcast/%E6%88%91%E4%B8%80%E7%9B%B4%E8%A6%BA%E5%BE%97-%E8%87%AA%E5%B7%B1%E4%B8%80%E5%AE%9A%E8%A6%81%E5%81%9A%E4%BA%9B%E4%BB%80%E9%BA%BC%E4%BA%8B%E6%89%8D%E8%83%BD%E7%A2%BA%E4%BF%9D%E8%87%AA%E5%B7%B1%E6%9C%89%E5%83%B9%E5%80%BC-%E6%88%91%E7%9A%84rtt%E7%99%82%E7%A8%8B%E5%88%86%E4%BA%AB/id1513786617?i=1000688765327&#34;&gt;文森說書：
我一直覺得，自己一定要做些什麼事才能確保自己有價值｜我的RTT療程分享
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但聽完後我更有興趣的是，想大概了解到底什麼是ＲＴＴ？
&lt;strong&gt;RTT 的起源&lt;/strong&gt;
RTT 由英國知名催眠治療師 Marisa Peer 創立。
Marisa Peer是誰?
她曾用 RTT 的技術與各行各業頂尖的精英合作過，媒體進行訪問或是在平台進行演講。
入選《Tatler》雜誌的「英國 250 位最佳醫生」名單&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://wikitia.com/wiki/Marisa_Peer&#34;&gt;Marisa_Peer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rapid Transformational Therapy (RTT) 是什麼？&lt;/strong&gt;
Rapid Transformational Therapy（快速轉化療法，簡稱 RTT）是一種結合多種心理自療法而成的療法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這項方法被稱為快速轉化療法（RTT®），它是一種綜合性解決方案導向的治療方式，融合了多種心理學與治療技術，包括：&lt;/p&gt;
&lt;p&gt;催眠治療（Hypnotherapy）
心理治療（Psychotherapy）
神經語言程式學（NLP）
認知行為療法（CBT）
神經科學（Neuroscience）
神經可塑性（Neuroplasticity）
RTT® 旨在快速、有效且持久地改變個案的思維模式與行為習慣，其培訓課程幫助治療師改變對待個案的方式，並讓他們能夠在短短幾次療程內，創造迅速且長久的轉變。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果深入討論，催眠療法（Hypnotherapy）、神經語言程式學（NLP）、認知行為療法（CBT）與心理學的綜合療法&amp;hellip;太多也太專業這不是我們可以深入討論的領域了。&lt;br&gt;
但簡單法說，感覺就是如文森有說到的，Marisa Peer取各家精華為一派應用的感覺。&lt;/p&gt;
&lt;p&gt;其核心目標是通過深入潛意識，找出並改變影響個人行為、信念與心理狀態的根源，進而在短時間內帶來持久的變化。這種療法強調「快速」且「深層」的心理轉變，與傳統心理治療相比，RTT 通常在 1-3 次療程內就能讓個案獲得顯著的改善，這也是它最大的特色之一。&lt;/p&gt;
&lt;p&gt;分享一些我自己延伸研究
找到的有趣的內容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zCv-ZBy6_yU&#34;&gt;TEDx Talks|To reach beyond your limits by training your mind | Marisa Peer | TEDxKCS
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lw3NyUMLh7Y&#34;&gt;Crash course for phenomenal success | Marisa Peer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我喜歡她有趣的檸檬實驗，&lt;br&gt;
實驗：&lt;br&gt;
現在閉上你的眼睛，想像你正握著一顆大又多汁的檸檬，將手伸到胸前的高度並慢慢把檸檬移動到靠近嘴巴的位置，而你每吸一口氣都能聞到檸檬散發出來的香氣！&lt;br&gt;
現在張開你的嘴巴，大口咬下這顆多汁的檸檬！並且在口中咀嚼。&lt;/p&gt;</description>
    </item>
    <item>
      <title>到底怎麼駭客自己的大腦? ＿＿思考是不是有這樣的狀況?</title>
      <link>http://localhost:1313/docs/self-determinationtheory/</link>
      <pubDate>Thu, 13 Mar 2025 22:54:34 +0800</pubDate>
      <guid>http://localhost:1313/docs/self-determinationtheory/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;Psychology&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/selfReflection01.png&#34;&gt;
到底怎麼駭客自己的大腦?讓他執行一直執行完美的事情。&lt;br&gt;
休閒將心理學資訊作為，整理思考。&lt;/p&gt;
&lt;p&gt;思考是不是有這樣的狀況?&lt;br&gt;
明知需要，做卻沒有動力? 甚是連開始都覺得困難?&lt;/p&gt;
&lt;p&gt;常常想著變聰明?身材好?健康?&lt;br&gt;
說沒有動力跟持久毅力，但很奇怪划手機看影片等卻又輕輕鬆鬆，兩三個小時不在話下?一整天都沒有問題?&lt;/p&gt;
&lt;p&gt;那來思考跟理解&amp;quot;動機&amp;quot;是什麼?&lt;/p&gt;
&lt;p&gt;外在動機，外在因素引響&lt;br&gt;
內在動機，內部肯定引響&lt;br&gt;
都在於自我決定理論，Self-determination theory&lt;br&gt;
【人類行為的自覺和內在動機】&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/tHgrGsU94Sg?si=Jw8zSIi4RY0QLGgj&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;blockquote&gt;
&lt;p&gt;查詢驗證資料參考源:
Deci和Ryan的自決理論（Self-determination theory）。（根據 Ryan, R.M. &amp;amp; Deci, E.L. (2000)。〈自我決定理論與內在動機、社會發展及幸福感的促進〉，發表於《美國心理學家》，第 55 卷第 1 期，頁 68-78。）&lt;/p&gt;
&lt;p&gt;調節風格 (Regulatory Styles)&lt;/p&gt;
&lt;p&gt;無調節 (Non-Regulation)
外部調節 (External Regulation)
內攝調節 (Introjected Regulation)
認同調節 (Identified Regulation)
整合調節 (Integrated Regulation)
內在調節 (Intrinsic Regulation)&lt;/p&gt;
&lt;p&gt;是什麼調節動機？
(What regulates the motivation?)&lt;/p&gt;
&lt;p&gt;無意圖、無價值感、無能感、缺乏控制
(Nonintentional, Nonvaluing, Incompetence, Lack of Control)
服從、外在獎勵與懲罰
(Compliance, External Rewards and Punishments)
自我控制、自尊涉入、內在獎勵與懲罰
(Self-Control, Ego-Involvement, Internal Rewards and Punishments)
個人重要性、有意識的價值觀
(Personal Importance, Conscious Valuing)
一致性、覺察、自我統合
(Congruence, Awareness, Synthesis With Self)
興趣、享受、內在滿足
(Interest, Enjoyment, Inherent Satisfaction)&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript 中用 var, let, 以及 const 有什麼差別？</title>
      <link>http://localhost:1313/docs/verletconst/</link>
      <pubDate>Fri, 28 Feb 2025 01:59:14 +0800</pubDate>
      <guid>http://localhost:1313/docs/verletconst/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;VerLetConst&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/VerLetConst.png&#34;&gt;
繼續這邊來整理JavaScript 中變數跟常數var, let, 以及 const 有什麼差別？&lt;br&gt;
可以從提升、初始化、重複宣告、重新賦值、作用域看有不同的行為。&lt;/p&gt;
&lt;h3 id=&#34;提升初始化&#34;&gt;提升、初始化&lt;/h3&gt;
&lt;p&gt;我們可以在上一篇整理文章中，看到兩階段運行中提升的變化。&lt;br&gt;
var 宣告的變數會自動初始化，因此在宣告前就使用變數，不會出現錯誤，而會是 undefined。&lt;br&gt;
但是 let 與 const 則，而是會進到暫時死區 (TDZ)，因此在 let 與 const 宣告變數前使用該變數，會出現錯誤。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;也可以在當中看到var 可以被重複宣告let 與 const 則不行。&lt;/p&gt;
&lt;h3 id=&#34;var-可以被重複宣告&#34;&gt;var 可以被重複宣告&lt;/h3&gt;
&lt;p&gt;var 可以被重複宣告，但是 let 與 const 則不行。&lt;br&gt;
所以當用的是 var 時，可以做到以下這樣：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var greeting = &amp;#34;Hello! &amp;#34;;
var greeting = &amp;#34;Hi Hi&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;let-不能重複宣告但可以重新賦值&#34;&gt;let 不能重複宣告，但可以重新賦值&lt;/h3&gt;
&lt;p&gt;所以會如下面這樣：&lt;br&gt;
如果let 像上面重複宣告，&lt;br&gt;
let greeting = &amp;ldquo;Hello! &amp;ldquo;;&lt;br&gt;
let greeting = &amp;ldquo;Hi Hi&amp;rdquo;;&lt;br&gt;
會出錯 SyntaxError: Identifier &amp;lsquo;greeting&amp;rsquo; has already been declared&lt;br&gt;
但是可以:&lt;/p&gt;</description>
    </item>
    <item>
      <title>什麼是 Variable Hoisting ?JavaScript 變數提升</title>
      <link>http://localhost:1313/docs/variablehoisting/</link>
      <pubDate>Wed, 26 Feb 2025 21:04:16 +0800</pubDate>
      <guid>http://localhost:1313/docs/variablehoisting/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;VariableHoisting&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/VariableHoisting.png&#34;&gt;
一邊整理JavaScript所學知識&lt;br&gt;
來筆記釐清 JaveScript 在執行階段內文如何運行的思路。&lt;br&gt;
什麼是 Variable Hoisting ?JavaScript 變數提升&lt;br&gt;
我們用runtime的角度來看，它不是一口氣跑完，是分層兩階段運行，在創建期(Creation Phase)和執行期(Execution Phase)階段有不同得變化。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;來分解動作&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;建立期&lt;/strong&gt; 時，會兩階段運作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;註冊名稱identifier（要那個東西的名字）
1-2. 進行初始化（初始化那個東西，通常是undefined)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;strong&gt;執行期&lt;/strong&gt; 時&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;執行函數/賦值（動作執行，或是給值，都是這個時候）&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;好的，來看&lt;/p&gt;
&lt;p&gt;var a = 1;&lt;br&gt;
console.log(a);&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;建立期:
1. var a    1-2.undefined 
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;執行期:
a = 1
console.log(a) /印出1
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;那同理可知，如果是這樣呢？&lt;/p&gt;
&lt;p&gt;console.log(a);&lt;br&gt;
var a =1;&lt;br&gt;
console.log(a);&lt;/p&gt;
&lt;p&gt;會印出什麼？&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;答案是：
undefined （第一圈已知有var a也有初始化，但第二圈執行期時先跑了他，但這邊還沒有賦值）
1         （已知a=1,執行出結果1）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以同理就可以理解&lt;br&gt;
if(false){&lt;br&gt;
var a = 1;&lt;br&gt;
}&lt;br&gt;
console.log(a);&lt;br&gt;
&lt;code&gt;是印出 undefined&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;那let呢？let不會變數提升？&lt;/strong&gt;&lt;br&gt;
No No~&lt;br&gt;
要記得JS本身就是分層兩階段運行，不管怎麼寫就是兩階段運做，運行時就是會提昇，那到底為什麼會有出錯的狀況呢？&lt;/p&gt;
&lt;p&gt;像是&lt;br&gt;
console.log(b);&lt;br&gt;
let b = 1;&lt;/p&gt;</description>
    </item>
    <item>
      <title>整理學習React</title>
      <link>http://localhost:1313/docs/startlearningreact/</link>
      <pubDate>Wed, 26 Feb 2025 14:56:40 +0800</pubDate>
      <guid>http://localhost:1313/docs/startlearningreact/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;React&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/react01.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;react-是什麼&#34;&gt;React 是什麼？&lt;/h2&gt;
&lt;p&gt;先來基本瞭解下，React 是什麼？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React 是一個陳述式、高效且具有彈性的 JavaScript 函式庫，用以建立使用者介面。它讓你使用小巧而獨立的「component」，來建立複雜的 UI。&lt;/li&gt;
&lt;li&gt;由Ｆacebook在2013年開發出來的&lt;/li&gt;
&lt;li&gt;嚴格上來說，React是函示庫（library),而不是框架（framework)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官網也大大地寫著：&lt;a href=&#34;https://react.dev/&#34;&gt;(React官網)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The library for web and native user interfaces&lt;br&gt;
用於網頁和原生應用的使用者介面函式庫&lt;/p&gt;
&lt;h3 id=&#34;框架framework-vs-函式庫library-簡單區別&#34;&gt;框架（Framework） vs. 函式庫（Library） 簡單區別&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&amp;#x1f680; 框架（Framework）&lt;/th&gt;
          &lt;th&gt;&amp;#x1f6e0;&amp;#xfe0f; 函式庫（Library）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;提供完整架構，規定開發方式&lt;/td&gt;
          &lt;td&gt;提供功能，開發者決定怎麼用&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;「框架呼叫你的程式」（控制反轉）&lt;/td&gt;
          &lt;td&gt;「你呼叫函式庫」（開發者主導）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;有規範，要照它的規則寫&lt;/td&gt;
          &lt;td&gt;彈性高，可以自由組合&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;#x1f4a1; 比喻：&lt;/p&gt;
&lt;p&gt;框架 = 連鎖手搖飲（基本著有標準 SOP，必須照流程做）&lt;br&gt;
函式庫 = 夜市小吃（自由選擇想吃什麼、怎麼搭配）&lt;/p&gt;
&lt;h3 id=&#34;例外與灰色地帶為什麼有人會認為-react-是框架&#34;&gt;例外與灰色地帶：為什麼有人會認為 React 是框架？&lt;/h3&gt;
&lt;p&gt;雖然 React 被定義為函式庫，但當它與 React Router（路由）、Redux（狀態管理）等強大生態系工具 搭配使用時，它的 完整性 就變得類似於框架。因此，有些開發者在實務上會稱它為「框架級函式庫」。&lt;br&gt;
然而，React 本身不強制這些工具，因此仍然歸類為函式庫。&lt;/p&gt;
&lt;h3 id=&#34;為什麼要選擇學習使用-react-&#34;&gt;為什麼要選擇學習使用 React ？&lt;/h3&gt;
&lt;p&gt;編寫網頁需要用到三種語言：&lt;br&gt;
HTML，CSS，JavaScrip&lt;/p&gt;
&lt;p&gt;&lt;em&gt;那先思考，那為什麼要使用React?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;React 不是取代 HTML、CSS、JavaScript，而是讓 前端開發更高效、更有組織性、更易於維護 的一個工具。&lt;/p&gt;
&lt;p&gt;&amp;#x1f4a1; 可以把它想像成：蓋房子的現代化工程技術，在 HTML、CSS、JavaScript 的基礎上，提供更強大的開發方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>學習資源整理</title>
      <link>http://localhost:1313/docs/resource/</link>
      <pubDate>Thu, 13 Feb 2025 18:29:22 +0800</pubDate>
      <guid>http://localhost:1313/docs/resource/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;resource&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/resourec.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;上課介紹的資源整理線上自我學習資源整理&#34;&gt;上課介紹的資源整理、線上自我學習資源整理&lt;/h1&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://pythonbook.cc/chapters/basic/introduction&#34;&gt;為你自己學 Python 線上書&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lydiahallie/javascript-questions&#34;&gt;javascript-questions&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10190873&#34;&gt;重新認識 JavaSript 鐵人 30 天&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://book.vue.tw/CH1/1-1-introduction.html&#34;&gt;重新認識 Vue.js 線上書&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;css&#34;&gt;CSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.s5-style.com/&#34;&gt;日本優秀網站聚集地&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://nipponcolors.com/#gunjyo&#34;&gt;日本傳統配色網站&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://cubic-bezier.com/#.69,-0.01,.3,.54&#34;&gt;運動曲線調節器&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.youtube.com/@CSScoke&#34;&gt;金魚都能懂的 CSS&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;hugo-架站&#34;&gt;Hugo 架站&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo 官網&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://hackmd.io/@eMP9zQQ0Qt6I8Uqp2Vqy6w/SyiOheL5N/%2FBVqowKshRH246Q7UDyodFA#MarkDown%E8%AA%9E%E6%B3%95%E5%A4%A7%E5%85%A8&#34;&gt;Markdown 語法&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/ikatyang/emoji-cheat-sheet&#34;&gt;MarkDown Emoji&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;框架套件&#34;&gt;框架/套件&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://tailwindcss.com/docs/installation/using-vite&#34;&gt;Tailwindcss&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://daisyui.com/docs/themes/&#34;&gt;daisyui&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://alpinejs.dev/essentials/installation&#34;&gt;alpine.js&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;django&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;basic&#34;&gt;Basic&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-TW/&#34;&gt;MDN 資訊字典&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://stackoverflow.com/questions&#34;&gt;Stack-Overflow 資訊問題集&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://leetcode.com/explore/&#34;&gt;LeetCode 面試題大全 &lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.explainthis.io/zh-hant&#34;&gt;Explain This&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/f2etw/jobs/issues&#34;&gt;github job&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://syntax.fm/&#34;&gt;syn tax&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://ithelp.ithome.com.tw/2024ironman/reward&#34;&gt;2024iThome鐵人賽 強者們學習資源&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;同學部落格&lt;/strong&gt;&lt;br&gt;
&lt;a href=&#34;https://realnewbie.com/&#34;&gt;培鈞&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://noobincoding.zeabur.app/posts/resource/&#34;&gt;雷雷&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何開始建立Hugo Web page?</title>
      <link>http://localhost:1313/docs/forhugo/</link>
      <pubDate>Thu, 13 Feb 2025 14:50:52 +0800</pubDate>
      <guid>http://localhost:1313/docs/forhugo/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;start hugo&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/forHugo.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何開始建立hugo-web-page&#34;&gt;如何開始建立Hugo Web page?&lt;/h2&gt;
&lt;h3 id=&#34;查詢網上資訊說5分鐘就可以建好&#34;&gt;查詢網上資訊說5分鐘就可以建好？&lt;/h3&gt;
&lt;p&gt;一開始學習時在網上搜尋資料時，看到這標題真的很吸引人&lt;br&gt;
看到這個標題還想說，那…應該可以的吧？&lt;br&gt;
但是怎麼樣就是少了什麼沒有辦法成功&amp;hellip;&lt;br&gt;
然後看助教幫同學處理問題也是花了點時間的,一起學習的同學也說有看到那吸引人眼晴的標題，她也是吶喊「才怪…連老師都抓一個小時，怎麼可能 5 分鐘就建好崩潰」&lt;/p&gt;
&lt;h3 id=&#34;回頭整理&#34;&gt;回頭整理&lt;/h3&gt;
&lt;p&gt;最近想整理資訊，建立自己的blog就又開始搜尋&lt;br&gt;
後來得知了很棒的建立資源，但版本必較舊了加上都是英文也是花了點時間吸收&amp;#x1f606;&lt;/p&gt;
&lt;h3 id=&#34;整理一下資訊上來&#34;&gt;整理一下資訊上來&lt;/h3&gt;
&lt;p&gt;主要還是不外乎&lt;br&gt;
安裝環境、挑選主題、上傳 GitHub&lt;br&gt;
來～上教材：資訊是參考這邊（英文好的小夥伴可以打開來執行了）&lt;br&gt;
&lt;a href=&#34;https://themes.gohugo.io/themes/hugo-papermod/&#34;&gt;https://themes.gohugo.io/themes/hugo-papermod/&lt;/a&gt;
&lt;a href=&#34;https://theplaybook.dev/docs/deploy-hugo-to-github-pages/&#34;&gt;https://theplaybook.dev/docs/deploy-hugo-to-github-pages/&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=_QSr2_pxIJs&#34;&gt;https://www.youtube.com/watch?v=_QSr2_pxIJs&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;安裝-hugo-並創建新網站&#34;&gt;安裝 Hugo 並創建新網站&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install hugo 
hugo new site theplaybook-demo -f yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 Homebrew 安裝 Hugo，並執行 hugo new site &amp;lt;site_name&amp;gt; 來創建一個新的網站資料夾 &amp;lt;site_name&amp;gt;，並包含 Hugo 的模板。
作者這邊執行完後有做&lt;code&gt;cd&lt;/code&gt;到他建立的theplaybook-demo，所以自己建立時可以檢查一下，自己有沒有確實在建立的檔案裡面。&lt;/p&gt;
&lt;h4 id=&#34;設定-baseurl&#34;&gt;設定 baseurl&lt;/h4&gt;
&lt;p&gt;找到baseURL 目前先不要設定 baseurl，保持空白。&lt;/p&gt;
&lt;h4 id=&#34;創建新頁面&#34;&gt;創建新頁面&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;hugo new docs/test.md&lt;/code&gt;&lt;br&gt;
用 hugo new &lt;filename&gt; 創建一個新的頁面。打開 test 文件，並將 draft: 設為false ，否則頁面將無法呈現。可以在 test. md 中添加隨便的內容。&lt;/p&gt;
&lt;p&gt;執行 hugo server 可以在本地端的 localhost:1313 測試應用程式，但如果沒有設置佈景主題，可能會顯示佈局錯誤。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
