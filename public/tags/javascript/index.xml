<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JavaScript on Cindy&#39;s blog</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in JavaScript on Cindy&#39;s blog</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 28 Feb 2025 01:59:14 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript 中用 var, let, 以及 const 有什麼差別？</title>
      <link>http://localhost:1313/docs/verletconst/</link>
      <pubDate>Fri, 28 Feb 2025 01:59:14 +0800</pubDate>
      <guid>http://localhost:1313/docs/verletconst/</guid>
      <description>&lt;p&gt;繼續這邊來整理JavaScript 中變數跟常數var, let, 以及 const 有什麼差別？&lt;br&gt;
可以從提升、初始化、重複宣告、重新賦值、作用域看有不同的行為。&lt;/p&gt;
&lt;h3 id=&#34;提升初始化&#34;&gt;提升、初始化&lt;/h3&gt;
&lt;p&gt;我們可以在上一篇整理，看到兩階段運行中提升的變化。&lt;br&gt;
var 宣告的變數會自動初始化，因此在宣告前就使用變數，不會出現錯誤，而會是 undefined。&lt;br&gt;
但是 let 與 const 則，而是會進到暫時死區 (TDZ)，因此在 let 與 const 宣告變數前使用該變數，會出現錯誤。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;也可以在當中看到var 可以被重複宣告let 與 const 則不行。&lt;/p&gt;
&lt;h3 id=&#34;var-可以被重複宣告&#34;&gt;var 可以被重複宣告&lt;/h3&gt;
&lt;p&gt;var 可以被重複宣告，但是 let 與 const 則不行。&lt;br&gt;
所以當用的是 var 時，可以做到以下這樣：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var greeting = &amp;#34;Hello! &amp;#34;;
var greeting = &amp;#34;Hi Hi&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;let-不能重複宣告但可以重新賦值&#34;&gt;let 不能重複宣告，但可以重新賦值&lt;/h3&gt;
&lt;p&gt;所以會如下面這樣：&lt;br&gt;
如果let 像上面重複宣告，&lt;br&gt;
let greeting = &amp;ldquo;Hello! &amp;ldquo;;&lt;br&gt;
let greeting = &amp;ldquo;Hi Hi&amp;rdquo;;&lt;br&gt;
會出錯 SyntaxError: Identifier &amp;lsquo;greeting&amp;rsquo; has already been declared&lt;br&gt;
但是可以:&lt;/p&gt;</description>
    </item>
    <item>
      <title>什麼是 Variable Hoisting ?JavaScript 變數提升</title>
      <link>http://localhost:1313/docs/variablehoisting/</link>
      <pubDate>Wed, 26 Feb 2025 21:04:16 +0800</pubDate>
      <guid>http://localhost:1313/docs/variablehoisting/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;VariableHoisting&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/VariableHoisting.png&#34;&gt;
一邊整理JavaScript所學知識&lt;br&gt;
&lt;a href=&#34;https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting&#34;&gt;MDN:提升（Hoisting）&lt;/a&gt;&lt;br&gt;
來筆記釐清 JaveScript 在執行階段內文如何運行的思路。&lt;br&gt;
什麼是 Variable Hoisting ?JavaScript 變數提升&lt;br&gt;
我們用runtime的角度來看，它不是一口氣跑完，是分層兩階段運行，在創建期(Creation Phase)和執行期(Execution Phase)階段有不同得變化。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;來分解動作&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;建立期&lt;/strong&gt; 時，會兩階段運作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;註冊名稱identifier（要那個東西的名字）
1-2. 進行初始化（初始化那個東西，通常是undefined)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;strong&gt;執行期&lt;/strong&gt; 時&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;執行函數/賦值（動作執行，或是給值，都是這個時候）&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;好的，來看&lt;/p&gt;
&lt;p&gt;var a = 1;&lt;br&gt;
console.log(a);&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;建立期:
1. var a    1-2.undefined 
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;執行期:
a = 1
console.log(a) /印出1
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;那同理可知，如果是這樣呢？&lt;/p&gt;
&lt;p&gt;console.log(a);&lt;br&gt;
var a =1;&lt;br&gt;
console.log(a);&lt;/p&gt;
&lt;p&gt;會印出什麼？&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;答案是：
undefined （第一圈已知有var a也有初始化，但第二圈執行期時先跑了他，但這邊還沒有賦值）
1         （已知a=1,執行出結果1）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以同理就可以理解&lt;br&gt;
if(false){&lt;br&gt;
var a = 1;&lt;br&gt;
}&lt;br&gt;
console.log(a);&lt;br&gt;
&lt;code&gt;是印出 undefined&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;那let呢？let不會變數提升？&lt;/strong&gt;&lt;br&gt;
No No~&lt;br&gt;
要記得JS本身就是分層兩階段運行，不管怎麼寫就是兩階段運做，運行時就是會提昇，那到底為什麼會有出錯的狀況呢？&lt;/p&gt;
&lt;p&gt;像是&lt;br&gt;
console.log(b);&lt;br&gt;
let b = 1;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
