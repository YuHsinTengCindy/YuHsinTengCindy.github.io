<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docs on Cindy&#39;s blog</title>
    <link>https://YuHsinTengCindy.github.io/docs/</link>
    <description>Recent content in Docs on Cindy&#39;s blog</description>
    <generator>Hugo -- 0.125.7</generator>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 26 Feb 2025 21:04:16 +0800</lastBuildDate>
    <atom:link href="https://YuHsinTengCindy.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>什麼是 Variable Hoisting ?JavaScript 變數提升</title>
      <link>https://YuHsinTengCindy.github.io/docs/variablehoisting/</link>
      <pubDate>Wed, 26 Feb 2025 21:04:16 +0800</pubDate>
      <guid>https://YuHsinTengCindy.github.io/docs/variablehoisting/</guid>
      <description>一邊整理JavaScript所學知識
MDN:提升（Hoisting）
來筆記釐清 JaveScript 在執行階段內文如何運行的思路。
什麼是 Variable Hoisting ?JavaScript 變數提升
我們用runtime的角度來看，它不是一口氣跑完，是分層兩階段運行，在創建期(Creation Phase)和執行期(Execution Phase)階段有不同得變化。
來分解動作
在 建立期 時，會兩階段運作
註冊名稱identifier（要那個東西的名字） 1-2. 進行初始化（初始化那個東西，通常是undefined) 在 執行期 時
執行函數/賦值（動作執行，或是給值，都是這個時候） 好的，來看
var a = 1;
console.log(a);
建立期: 1. var a 1-2.undefined 執行期: a = 1 console.log(a) /印出1 那同理可知，如果是這樣呢？
console.log(a);
var a =1;
console.log(a);
會印出什麼？
答案是： undefined （第一圈已知有var a也有初始化，但第二圈執行期時先跑了他，但這邊還沒有賦值） 1 （已知a=1,執行出結果1） 所以同理就可以理解
if(false){
var a = 1;
}
console.log(a);
是印出 undefined
那let呢？let不會變數提升？
No No~
要記得JS本身就是分層兩階段運行，不管怎麼寫就是兩階段運做，運行時就是會提昇，那到底為什麼會有出錯的狀況呢？
像是</description>
    </item>
    <item>
      <title>整理學習React</title>
      <link>https://YuHsinTengCindy.github.io/docs/startlearningreact/</link>
      <pubDate>Wed, 26 Feb 2025 14:56:40 +0800</pubDate>
      <guid>https://YuHsinTengCindy.github.io/docs/startlearningreact/</guid>
      <description>React 是什麼？ 先來基本瞭解下，React 是什麼？
React 是一個陳述式、高效且具有彈性的 JavaScript 函式庫，用以建立使用者介面。它讓你使用小巧而獨立的「component」，來建立複雜的 UI。 由Ｆacebook在2013年開發出來的 嚴格上來說，React是函示庫（library),而不是框架（framework) 官網也大大地寫著：(React官網)
The library for web and native user interfaces
用於網頁和原生應用的使用者介面函式庫
框架（Framework） vs. 函式庫（Library） 簡單區別 &amp;#x1f680; 框架（Framework） &amp;#x1f6e0;&amp;#xfe0f; 函式庫（Library） 提供完整架構，規定開發方式 提供功能，開發者決定怎麼用 「框架呼叫你的程式」（控制反轉） 「你呼叫函式庫」（開發者主導） 有規範，要照它的規則寫 彈性高，可以自由組合 &amp;#x1f4a1; 比喻：
框架 = 連鎖手搖飲（基本著有標準 SOP，必須照流程做）
函式庫 = 夜市小吃（自由選擇想吃什麼、怎麼搭配）
例外與灰色地帶：為什麼有人會認為 React 是框架？ 雖然 React 被定義為函式庫，但當它與 React Router（路由）、Redux（狀態管理）等強大生態系工具 搭配使用時，它的 完整性 就變得類似於框架。因此，有些開發者在實務上會稱它為「框架級函式庫」。
然而，React 本身不強制這些工具，因此仍然歸類為函式庫。
為什麼要選擇學習使用 React ？ 編寫網頁需要用到三種語言：
HTML，CSS，JavaScrip
那先思考，那為什麼要使用React?
React 不是取代 HTML、CSS、JavaScript，而是讓 前端開發更高效、更有組織性、更易於維護 的一個工具。
&amp;#x1f4a1; 可以把它想像成：蓋房子的現代化工程技術，在 HTML、CSS、JavaScript 的基礎上，提供更強大的開發方式。</description>
    </item>
    <item>
      <title>學習資源整理</title>
      <link>https://YuHsinTengCindy.github.io/docs/resource/</link>
      <pubDate>Thu, 13 Feb 2025 18:29:22 +0800</pubDate>
      <guid>https://YuHsinTengCindy.github.io/docs/resource/</guid>
      <description>上課介紹的資源整理、線上自我學習資源整理 Python 為你自己學 Python 線上書
JavaScript javascript-questions
重新認識 JavaSript 鐵人 30 天
重新認識 Vue.js 線上書
CSS 日本優秀網站聚集地
日本傳統配色網站
運動曲線調節器
金魚都能懂的 CSS
Hugo 架站 Hugo 官網
Markdown 語法
MarkDown Emoji
框架/套件 Tailwindcss daisyui
alpine.js
django
Basic MDN 資訊字典
Stack-Overflow 資訊問題集
LeetCode 面試題大全 Explain This
其他 github job
syn tax 2024iThome鐵人賽 強者們學習資源
同學部落格
培鈞
雷雷</description>
    </item>
    <item>
      <title>如何開始建立Hugo Web page?</title>
      <link>https://YuHsinTengCindy.github.io/docs/forhugo/</link>
      <pubDate>Thu, 13 Feb 2025 14:50:52 +0800</pubDate>
      <guid>https://YuHsinTengCindy.github.io/docs/forhugo/</guid>
      <description>如何開始建立Hugo Web page? 查詢網上資訊說5分鐘就可以建好？ 一開始學習時在網上搜尋資料時，看到這標題真的很吸引人
看到這個標題還想說，那…應該可以的吧？
但是怎麼樣就是少了什麼沒有辦法成功&amp;hellip;
然後看助教幫同學處理問題也是花了點時間的,一起學習的同學也說有看到那吸引人眼晴的標題，她也是吶喊「才怪…連老師都抓一個小時，怎麼可能 5 分鐘就建好崩潰」
回頭整理 最近想整理資訊，建立自己的blog就又開始搜尋
後來得知了很棒的建立資源，但版本必較舊了加上都是英文也是花了點時間吸收&amp;#x1f606;
整理一下資訊上來 主要還是不外乎
安裝環境、挑選主題、上傳 GitHub
來～上教材：資訊是參考這邊（英文好的小夥伴可以打開來執行了）
https://themes.gohugo.io/themes/hugo-papermod/ https://theplaybook.dev/docs/deploy-hugo-to-github-pages/
https://www.youtube.com/watch?v=_QSr2_pxIJs
安裝 Hugo 並創建新網站 brew install hugo hugo new site theplaybook-demo -f yml 使用 Homebrew 安裝 Hugo，並執行 hugo new site &amp;lt;site_name&amp;gt; 來創建一個新的網站資料夾 &amp;lt;site_name&amp;gt;，並包含 Hugo 的模板。 作者這邊執行完後有做cd到他建立的theplaybook-demo，所以自己建立時可以檢查一下，自己有沒有確實在建立的檔案裡面。
設定 baseurl 找到baseURL 目前先不要設定 baseurl，保持空白。
創建新頁面 hugo new docs/test.md
用 hugo new 創建一個新的頁面。打開 test 文件，並將 draft: 設為false ，否則頁面將無法呈現。可以在 test. md 中添加隨便的內容。
執行 hugo server 可以在本地端的 localhost:1313 測試應用程式，但如果沒有設置佈景主題，可能會顯示佈局錯誤。</description>
    </item>
  </channel>
</rss>
