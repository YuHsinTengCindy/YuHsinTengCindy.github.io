<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JavaScript on Cindy&#39;s blog</title>
    <link>https://YuHsinTengCindy.github.io/categories/javascript/</link>
    <description>Recent content in JavaScript on Cindy&#39;s blog</description>
    <generator>Hugo -- 0.125.7</generator>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 28 Feb 2025 01:59:14 +0800</lastBuildDate>
    <atom:link href="https://YuHsinTengCindy.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript 中用 var, let, 以及 const 有什麼差別？</title>
      <link>https://YuHsinTengCindy.github.io/docs/verletconst/</link>
      <pubDate>Fri, 28 Feb 2025 01:59:14 +0800</pubDate>
      <guid>https://YuHsinTengCindy.github.io/docs/verletconst/</guid>
      <description>繼續這邊來整理JavaScript 中變數跟常數var, let, 以及 const 有什麼差別？
可以從提升、初始化、重複宣告、重新賦值、作用域看有不同的行為。
提升、初始化 我們可以在上一篇整理文章中，看到兩階段運行中提升的變化。
var 宣告的變數會自動初始化，因此在宣告前就使用變數，不會出現錯誤，而會是 undefined。
但是 let 與 const 則，而是會進到暫時死區 (TDZ)，因此在 let 與 const 宣告變數前使用該變數，會出現錯誤。
也可以在當中看到var 可以被重複宣告let 與 const 則不行。
var 可以被重複宣告 var 可以被重複宣告，但是 let 與 const 則不行。
所以當用的是 var 時，可以做到以下這樣：
var greeting = &amp;#34;Hello! &amp;#34;; var greeting = &amp;#34;Hi Hi&amp;#34;; let 不能重複宣告，但可以重新賦值 所以會如下面這樣：
如果let 像上面重複宣告，
let greeting = &amp;ldquo;Hello! &amp;ldquo;;
let greeting = &amp;ldquo;Hi Hi&amp;rdquo;;
會出錯 SyntaxError: Identifier &amp;lsquo;greeting&amp;rsquo; has already been declared</description>
    </item>
    <item>
      <title>什麼是 Variable Hoisting ?JavaScript 變數提升</title>
      <link>https://YuHsinTengCindy.github.io/docs/variablehoisting/</link>
      <pubDate>Wed, 26 Feb 2025 21:04:16 +0800</pubDate>
      <guid>https://YuHsinTengCindy.github.io/docs/variablehoisting/</guid>
      <description>一邊整理JavaScript所學知識
來筆記釐清 JaveScript 在執行階段內文如何運行的思路。
什麼是 Variable Hoisting ?JavaScript 變數提升
我們用runtime的角度來看，它不是一口氣跑完，是分層兩階段運行，在創建期(Creation Phase)和執行期(Execution Phase)階段有不同得變化。
來分解動作
在 建立期 時，會兩階段運作
註冊名稱identifier（要那個東西的名字） 1-2. 進行初始化（初始化那個東西，通常是undefined) 在 執行期 時
執行函數/賦值（動作執行，或是給值，都是這個時候） 好的，來看
var a = 1;
console.log(a);
建立期: 1. var a 1-2.undefined 執行期: a = 1 console.log(a) /印出1 那同理可知，如果是這樣呢？
console.log(a);
var a =1;
console.log(a);
會印出什麼？
答案是： undefined （第一圈已知有var a也有初始化，但第二圈執行期時先跑了他，但這邊還沒有賦值） 1 （已知a=1,執行出結果1） 所以同理就可以理解
if(false){
var a = 1;
}
console.log(a);
是印出 undefined
那let呢？let不會變數提升？
No No~
要記得JS本身就是分層兩階段運行，不管怎麼寫就是兩階段運做，運行時就是會提昇，那到底為什麼會有出錯的狀況呢？
像是
console.log(b);</description>
    </item>
  </channel>
</rss>
